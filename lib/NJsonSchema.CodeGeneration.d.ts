// Generated for: NJsonSchema.CodeGeneration 11.0.0.0
// Generated by: Microsoft.JavaScript.NodeApi.Generator 0.4.0.0
/* eslint-disable */


import './NJsonSchema';
import './NJsonSchema.Annotations';

declare module 'node-api-dotnet' {

	export namespace NJsonSchema.CodeGeneration {
		export class CodeArtifact {
			constructor(
				typeName: string,
				type: NJsonSchema.CodeGeneration.CodeArtifactType,
				language: NJsonSchema.CodeGeneration.CodeArtifactLanguage,
				category: NJsonSchema.CodeGeneration.CodeArtifactCategory,
				code: string,
			);

			constructor(
				typeName: string,
				type: NJsonSchema.CodeGeneration.CodeArtifactType,
				language: NJsonSchema.CodeGeneration.CodeArtifactLanguage,
				category: NJsonSchema.CodeGeneration.CodeArtifactCategory,
				template: NJsonSchema.CodeGeneration.ITemplate,
			);

			constructor(
				typeName: string,
				baseTypeName: string | undefined,
				type: NJsonSchema.CodeGeneration.CodeArtifactType,
				language: NJsonSchema.CodeGeneration.CodeArtifactLanguage,
				category: NJsonSchema.CodeGeneration.CodeArtifactCategory,
				template: NJsonSchema.CodeGeneration.ITemplate,
			);

			constructor(
				typeName: string,
				baseTypeName: string | undefined,
				type: NJsonSchema.CodeGeneration.CodeArtifactType,
				language: NJsonSchema.CodeGeneration.CodeArtifactLanguage,
				category: NJsonSchema.CodeGeneration.CodeArtifactCategory,
				code: string,
			);

			readonly TypeName: string;

			readonly BaseTypeName?: string;

			readonly Type: NJsonSchema.CodeGeneration.CodeArtifactType;

			readonly Language: NJsonSchema.CodeGeneration.CodeArtifactLanguage;

			readonly Category: NJsonSchema.CodeGeneration.CodeArtifactCategory;

			readonly Code: string;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export enum CodeArtifactCategory {
			Undefined = 0,

			Client = 1,

			Contract = 2,

			Utility = 3,
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export namespace CodeArtifactExtensions {
			export function Concatenate(artifacts: Iterable<NJsonSchema.CodeGeneration.CodeArtifact>): string;

			export function OrderByBaseDependency(results: Iterable<NJsonSchema.CodeGeneration.CodeArtifact>): Iterable<NJsonSchema.CodeGeneration.CodeArtifact>;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export enum CodeArtifactLanguage {
			Undefined = 0,

			CSharp = 1,

			TypeScript = 2,

			Html = 3,
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export enum CodeArtifactType {
			Undefined = 0,

			Class = 1,

			Interface = 2,

			Enum = 3,

			Function = 4,
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export class CodeGeneratorSettingsBase {
			constructor();

			SchemaType: NJsonSchema.SchemaType;

			GenerateDefaultValues: boolean;

			ExcludedTypeNames: string[];

			PropertyNameGenerator: NJsonSchema.CodeGeneration.IPropertyNameGenerator;

			TypeNameGenerator: NJsonSchema.ITypeNameGenerator;

			EnumNameGenerator: NJsonSchema.CodeGeneration.IEnumNameGenerator;

			TemplateFactory: NJsonSchema.CodeGeneration.ITemplateFactory;

			TemplateDirectory?: string;

			ValueGenerator: NJsonSchema.CodeGeneration.ValueGeneratorBase;

			InlineNamedAny: boolean;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export class DefaultEnumNameGenerator implements NJsonSchema.CodeGeneration.IEnumNameGenerator {
			constructor();

			Generate(
				index: number,
				name: string | undefined,
				value: unknown | undefined,
				schema: NJsonSchema.JsonSchema,
			): string;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export class DefaultTemplateFactory implements NJsonSchema.CodeGeneration.ITemplateFactory {
			constructor(
				settings: NJsonSchema.CodeGeneration.CodeGeneratorSettingsBase,
				assemblies: unknown[],
			);

			CreateTemplate(
				language: string,
				template: string,
				model: unknown,
			): NJsonSchema.CodeGeneration.ITemplate;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export class ExtensionCode {
			ExtensionClasses: unknown;

			ImportCode: string;

			TopCode: string;

			BottomCode?: string;

			GetExtensionClassBody(className: string): string;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export class GeneratorBase {
			GenerateFile(typeNameHint: string): string;

			GenerateFile(): string;

			GenerateTypes(
				schema: NJsonSchema.JsonSchema,
				typeNameHint: string | undefined,
			): Iterable<NJsonSchema.CodeGeneration.CodeArtifact>;

			GenerateFile(
				schema: NJsonSchema.JsonSchema,
				typeNameHint: string | undefined,
			): string;

			GenerateTypes(): Iterable<NJsonSchema.CodeGeneration.CodeArtifact>;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export interface IEnumNameGenerator {
			Generate(
				index: number,
				name: string | undefined,
				value: unknown | undefined,
				schema: NJsonSchema.JsonSchema,
			): string;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export interface IPropertyNameGenerator {
			Generate(property: NJsonSchema.JsonSchemaProperty): string;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export interface ITemplate {
			Render(): string;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export interface ITemplateFactory {
			CreateTemplate(
				language: string,
				template: string,
				model: unknown,
			): NJsonSchema.CodeGeneration.ITemplate;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export namespace JsonSchemaGraphUtilities {
			export function GetDerivedSchemas(
				schema: NJsonSchema.JsonSchema,
				rootObject: unknown,
			): Map<NJsonSchema.JsonSchema, string | undefined>;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export class TypeResolverBase {
			readonly Types: ReadonlyMap<NJsonSchema.JsonSchema, string>;

			TryResolve(
				schema: NJsonSchema.JsonSchema | undefined,
				typeNameHint: string | undefined,
			): string | undefined;

			Resolve(
				schema: NJsonSchema.JsonSchema,
				isNullable: boolean,
				typeNameHint: string | undefined,
			): string;

			GetOrGenerateTypeName(
				schema: NJsonSchema.JsonSchema,
				typeNameHint: string | undefined,
			): string;

			RegisterSchemaDefinitions(definitions: Map<string, NJsonSchema.JsonSchema>): void;

			RemoveNullability(schema: NJsonSchema.JsonSchema): NJsonSchema.JsonSchema;

			GetResolvableSchema(schema: NJsonSchema.JsonSchema): NJsonSchema.JsonSchema;

			GeneratesType(schema: NJsonSchema.JsonSchema): boolean;
		}
	}

	export namespace NJsonSchema.CodeGeneration {
		export class ValueGeneratorBase {
			GetDefaultValue(
				schema: NJsonSchema.JsonSchema,
				allowsNull: boolean,
				targetType: string,
				typeNameHint: string | undefined,
				useSchemaDefault: boolean,
				typeResolver: NJsonSchema.CodeGeneration.TypeResolverBase,
			): string | undefined;

			GetNumericValue(
				type: NJsonSchema.JsonObjectType,
				value: unknown,
				format: string | undefined,
			): string;
		}
	}

	export namespace NJsonSchema.CodeGeneration.Models {
		export class ClassTemplateModelBase {
			readonly ClassName: string;

			readonly SchemaTitle?: string;

			readonly IsObject: boolean;

			readonly IsAbstract: boolean;

			readonly ExtensionData?: Map<string, unknown | undefined>;

			readonly DerivedClasses: Iterable<NJsonSchema.CodeGeneration.Models.ClassTemplateModelBase.DerivedClassModel> & { length: number, add(item: NJsonSchema.CodeGeneration.Models.ClassTemplateModelBase.DerivedClassModel): void, delete(item: NJsonSchema.CodeGeneration.Models.ClassTemplateModelBase.DerivedClassModel): boolean };
		}
	}

	export namespace NJsonSchema.CodeGeneration.Models.ClassTemplateModelBase {
		export class DerivedClassModel {
			readonly Discriminator: string;

			readonly ClassName: string;

			readonly IsAbstract: boolean;
		}
	}

	export namespace NJsonSchema.CodeGeneration.Models {
		export class EnumerationItemModel {
			constructor();

			Name: string;

			Value: string;

			InternalValue?: string;

			InternalFlagValue?: string;
		}
	}

	export namespace NJsonSchema.CodeGeneration.Models {
		export class PropertyModelBase {
			readonly Type: string;

			readonly ValueGenerator: NJsonSchema.CodeGeneration.ValueGeneratorBase;

			readonly HasDefaultValue: boolean;

			readonly DefaultValue?: string;

			PropertyName: string;

			readonly IsNullable: boolean;

			readonly IsRequired: boolean;

			readonly IsStringEnumArray: boolean;

			readonly ExtensionData?: Map<string, unknown | undefined>;

			readonly Format?: string;
		}
	}
}

declare module 'NJsonSchema.CodeGeneration' {
	export * from 'node-api-dotnet';
}
