// Generated for: NJsonSchema.Annotations 11.0.0.0
// Generated by: Microsoft.JavaScript.NodeApi.Generator 0.4.0.0
/* eslint-disable */


declare module 'node-api-dotnet' {

	export namespace NJsonSchema {
		export namespace JsonFormatStrings {
		}
	}

	export namespace NJsonSchema {
		export enum JsonObjectType {
			None = 0,

			Array = 1,

			Boolean = 2,

			Integer = 4,

			Null = 8,

			Number = 16,

			Object = 32,

			String = 64,

			File = 128,
		}
	}

	export namespace NJsonSchema.Annotations {
		export class CanBeNullAttribute {
			constructor();

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export interface IJsonSchemaExtensionDataAttribute {
			readonly ExtensionData: ReadonlyMap<string, unknown>;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class ItemsCanBeNullAttribute {
			constructor();

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class JsonSchemaAbstractAttribute {
			constructor();

			constructor(isAbstract: boolean);

			readonly IsAbstract: boolean;

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class JsonSchemaAttribute {
			constructor();

			constructor(name: string);

			constructor(type: NJsonSchema.JsonObjectType);

			Name?: string;

			Type: NJsonSchema.JsonObjectType;

			Format?: string;

			ArrayItem?: unknown;

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class JsonSchemaDateAttribute {
			constructor();

			Name?: string;

			readonly Type: NJsonSchema.JsonObjectType;

			Format?: string;

			ArrayItem?: unknown;

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class JsonSchemaExtensionDataAttribute implements NJsonSchema.Annotations.IJsonSchemaExtensionDataAttribute {
			constructor(
				key: string,
				value: unknown,
			);

			readonly Key: string;

			readonly Value: unknown;

			readonly ExtensionData: ReadonlyMap<string, unknown>;

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class JsonSchemaFlattenAttribute {
			constructor();

			constructor(flatten: boolean);

			readonly Flatten: boolean;

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class JsonSchemaIgnoreAttribute {
			constructor();

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class JsonSchemaPatternPropertiesAttribute {
			constructor(regularExpression: string);

			constructor(
				regularExpression: string,
				type: unknown | undefined,
			);

			readonly RegularExpression: string;

			readonly Type?: unknown;

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class JsonSchemaProcessorAttribute {
			constructor(
				type: unknown,
				parameters: unknown[],
			);

			Type: unknown;

			Parameters: unknown[];

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class JsonSchemaTypeAttribute {
			constructor(type: unknown);

			readonly Type: unknown;

			IsNullable: boolean;

			IsNullableRaw?: boolean;

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class MultipleOfAttribute {
			constructor(multipleOf: number);

			constructor(multipleOf: unknown);

			MultipleOf: unknown;

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}

	export namespace NJsonSchema.Annotations {
		export class NotNullAttribute {
			constructor();

			readonly TypeId: unknown;

			Equals(obj: unknown | undefined): boolean;

			GetHashCode(): number;

			IsDefaultAttribute(): boolean;

			Match(obj: unknown | undefined): boolean;
		}
	}
}

declare module 'NJsonSchema.Annotations' {
	export * from 'node-api-dotnet';
}
